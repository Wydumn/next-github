{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nconst LOGOUT = 'LOGOUT';\nconst userInitialState = {};\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n});\nexport function logout() {\n  return dispatch => {\n    axios.post('/logout').then(resp => {\n      console.log('1');\n\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('logout failed', resp);\n      }\n    }).catch(err => {\n      console.log('logout failed', err);\n    });\n  };\n} // 每次调用都生成一个新的store\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}