{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nvar LOGOUT = 'LOGOUT';\nvar userInitialState = {};\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n}\n\nvar allReducers = combineReducers({\n  user: userReducer\n});\nexport function logout() {\n  return function (dispatch) {\n    axios.post('/logout').then(function (resp) {\n      console.log('1');\n\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('logout failed', resp);\n      }\n    })[\"catch\"](function (err) {\n      console.log('logout failed', err);\n    });\n  };\n} // 每次调用都生成一个新的store\n\nexport default function initializeStore(state) {\n  var store = createStore(allReducers, _Object$assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}