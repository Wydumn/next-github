{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Pagination from \"antd/lib/pagination\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { memo, isValidElement } from 'react';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport Repo from '../components/Repo';\n\nconst api = require('../lib/api');\n\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust'];\nconst SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\n\nfunction noop() {}\n\nconst per_page = 20;\nconst FilterLink = memo(({\n  name,\n  query,\n  lang,\n  sort,\n  order,\n  page\n}) => {\n  let queryString = `?query=${query}`;\n  if (lang) queryString += `&lang=${lang}`;\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`;\n  if (page) queryString += `&page=${page}`;\n  queryString += `&per_page=${per_page}`;\n  return __jsx(Link, {\n    href: `/search${queryString}`\n  }, isValidElement(name) ? name : __jsx(\"a\", null, name), __jsx(\"a\", null, name));\n});\n\nfunction Search({\n  router,\n  repos\n}) {\n  const querys = Object.assign({}, router.query);\n  const {\n    lang,\n    sort,\n    order,\n    page\n  } = router.query;\n  return __jsx(\"div\", {\n    className: \"jsx-4261653446\" + \" \" + \"root\"\n  }, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"jsx-4261653446\" + \" \" + \"list-header\"\n    }, \"\\u8BED\\u8A00\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: item => {\n      const selected = lang === item;\n      return __jsx(_List.Item, {\n        sytle: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", {\n        className: \"jsx-4261653446\"\n      }, item) : __jsx(FilterLink, _extends({}, querys, {\n        lang: item,\n        name: item\n      })));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"jsx-4261653446\" + \" \" + \"list-header\"\n    }, \"\\u6392\\u5E8F\"),\n    dataSource: SORT_TYPES,\n    renderItem: item => {\n      let selected = false;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.value === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", {\n        className: \"jsx-4261653446\"\n      }, item.name) : __jsx(FilterLink, _extends({}, querys, {\n        sort: item.value,\n        order: item.order,\n        name: item.name\n      })));\n    }\n  })), __jsx(_Col, {\n    span: 18\n  }, __jsx(\"h3\", {\n    className: \"jsx-4261653446\" + \" \" + \"repos-title\"\n  }, repos.total_count, \"\\u4E2ARepositories\"), repos.items.map(repo => __jsx(Repo, {\n    repo: repo,\n    key: repo.id\n  })), __jsx(\"div\", {\n    className: \"jsx-4261653446\" + \" \" + \"pagination\"\n  }, __jsx(_Pagination, {\n    pageSize: per_page,\n    current: Number(page) || 1,\n    total: 1000,\n    onChange: noop,\n    itemRender: (page, type, ol) => {\n      const p = type === 'page' ? page : type === 'prev' ? page - 1 : page + 1;\n      const name = type === 'page' ? page : ol;\n      return __jsx(FilterLink, _extends({}, querys, {\n        page: p,\n        name: name\n      }));\n    }\n  })))), __jsx(_JSXStyle, {\n    id: \"4261653446\"\n  }, [\".root.jsx-4261653446{padding:20px 0;}\", \".list-header.jsx-4261653446{font-weight:800;font-size:16px;}\", \".repos-title.jsx-4261653446{border-bottom:1px solid #eee;font-size:24px;line-height:50px;}\", \".pagination.jsx-4261653446{padding:20px;text-align:center;}\"]));\n}\n\nSearch.getInitialProps = async ({\n  ctx\n}) => {\n  const {\n    query,\n    sort,\n    lang,\n    order,\n    page\n  } = ctx.query;\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    };\n  }\n\n  let queryString = `?q=${query}`;\n  if (lang) queryString += `+language:${lang}`;\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`;\n  if (page) queryString += `&page=${page}`;\n  queryString += `&per_page=${per_page}`;\n  const result = await api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n};\n\nexport default withRouter(Search);","map":null,"metadata":{},"sourceType":"module"}